{"version":3,"sources":["serviceWorker.js","components/atoms/Logo/index.js","components/atoms/Button/index.js","components/organisms/Header/index.js","actions/index.js","actions/types.js","components/atoms/CityListItem/index.js","components/molecules/CityList/index.js","components/organisms/CityNav/index.js","components/atoms/WeatherCurrent/index.js","components/molecules/WeatherDetailsCity/index.js","components/atoms/TempDisplay/index.js","components/molecules/WeatherDetailsMinMax/index.js","components/molecules/WeatherDetails/index.js","components/organisms/WeatherResult/index.js","components/template/WeatherPage/index.js","components/molecules/MinMaxCard/index.js","components/template/MinMaxPage/index.js","components/App.js","reducers/minMaxReducer.js","reducers/index.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Logo","props","className","defaultProps","Button","children","variant","type","Header","useLocation","reg","buttonPath","test","pathname","buttonLabel","to","setMinTemp","weather","dispatch","payload","setMaxTemp","CityListItem","active","handler","activeClass","onClick","onKeyDown","name","CityList","cityOptions","city1","city2","city3","CityNav","WeatherCurrent","unit","WeatherDetailsCity","cityName","country","icon","alt","src","TempDisplay","temp","WeatherDetailsMinMax","min","max","WeatherDetails","city","WeatherResult","inactiveClass","inactive","WeatherPage","currentValues","setCurrentValues","useSelector","minMax","minWeather","maxWeather","useDispatch","a","process","unitDesc","cityId","id","callURL","axios","get","response","res","data","Number","main","toFixed","temp_min","temp_max","newValues","sys","MinMaxCard","title","classIcon","bgIcon","MinMaxPage","Object","entries","length","constructor","App","useState","path","combineReducers","action","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.49532692.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/* Logo component its the main header link. */\r\n\r\nconst Logo = props => {\r\n  const { className } = props;\r\n  return <h1 className={`logo ${className}`}>Previsão do tempo</h1>;\r\n};\r\n\r\nLogo.propTypes = {\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n};\r\n\r\nLogo.defaultProps = {\r\n  // No aditional classes is the default value\r\n  className: '',\r\n};\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/* Button component contains minimal style. It's just a block with text.\r\n *  You can pass his 'type' props for defined types of button or\r\n *  define your own class.\r\n */\r\n\r\nconst Button = props => {\r\n  const { children, variant, className } = props;\r\n  return (\r\n    <button type=\"button\" className={`btn btn-${variant} ${className}`}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  // Content/Label of the button\r\n  children: PropTypes.node.isRequired,\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n  // Button pre-defined variants\r\n  variant: PropTypes.oneOf(['default', 'nav', 'no-style']),\r\n};\r\n\r\nButton.defaultProps = {\r\n  // No aditional classes is the default value\r\n  className: '',\r\n  // default button variant with no aditional styles\r\n  variant: 'default',\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nimport Logo from '../../atoms/Logo';\r\nimport Button from '../../atoms/Button';\r\n\r\n/* Header component hold 2 links. The Logo will always redirect to the WeatherPage component\r\n * and the second is the nav button responsible to change pages through react router.\r\n */\r\n\r\nconst Header = props => {\r\n  const { className } = props;\r\n  // location hook from react-router v5.1\r\n  const location = useLocation();\r\n  const reg = /minmax$/;\r\n  // Route that the button will point\r\n  const buttonPath = reg.test(location.pathname) ? '/' : '/minmax';\r\n  // And its label\r\n  const buttonLabel = reg.test(location.pathname) ? 'Previsão do tempo' : 'Visualizar min/max';\r\n\r\n  return (\r\n    <header className={`header ${className}`}>\r\n      <Link to=\"/\">\r\n        <Logo />\r\n      </Link>\r\n      <Link to={buttonPath}>\r\n        <Button variant=\"nav\">{buttonLabel}</Button>\r\n      </Link>\r\n    </header>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n};\r\n\r\nHeader.defaultProps = {\r\n  // No aditional classes is the default value\r\n  className: '',\r\n};\r\n\r\nexport default Header;\r\n","import { SET_MINIMUM, SET_MAXIMUM } from './types';\r\n\r\n// Set the lowest temperature seen used on the MinMaxPage\r\nexport const setMinTemp = weather => dispatch => {\r\n  dispatch({ type: SET_MINIMUM, payload: weather });\r\n};\r\n\r\n// Set the highest temperature seen used on the MinMaxPage\r\nexport const setMaxTemp = weather => dispatch => {\r\n  dispatch({ type: SET_MAXIMUM, payload: weather });\r\n};\r\n","/* Separate file to avoid typos and easy visualization of\r\n *  different actions type.\r\n */\r\n\r\nexport const SET_MINIMUM = 'set_minimum';\r\nexport const SET_MAXIMUM = 'set_maximum';\r\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* CityListItem Component\r\n * Single list item of a specific city.\r\n * Multiple CityListItems go into the CityList component\r\n */\r\n\r\nconst CityListItem = props => {\r\n  const { className, children, active, handler } = props;\r\n  const activeClass = active ? \"city-nav__list-item--active\" : \"\";\r\n  return (\r\n    <li\r\n      onClick={() => handler(children)}\r\n      onKeyDown={() => handler(children)}\r\n      className={`city-nav__list-item ${activeClass} ${className}`}\r\n    >\r\n      {children.name}\r\n    </li>\r\n  );\r\n};\r\n\r\nCityListItem.propTypes = {\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n  // Content/Label of the button\r\n  children: PropTypes.shape({ name: PropTypes.string, id: PropTypes.string })\r\n    .isRequired,\r\n  // Props to indicate if the list item is the active city\r\n  active: PropTypes.bool,\r\n  // Function passed from parent to handle API Call click\r\n  handler: PropTypes.func.isRequired\r\n};\r\n\r\nCityListItem.defaultProps = {\r\n  // Default value of no aditional classes\r\n  className: \"\",\r\n  active: false\r\n};\r\n\r\nexport default CityListItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CityListItem from '../../atoms/CityListItem';\r\n\r\n/* CityList component.\r\n * Navigation tab for the different options of cities available.\r\n */\r\n\r\nconst CityList = props => {\r\n  const { className, handler, cityOptions } = props;\r\n  return (\r\n    <ul className={`city-nav__list ${className}`}>\r\n      <CityListItem handler={handler}>{cityOptions.city1}</CityListItem>\r\n      <CityListItem handler={handler}>{cityOptions.city2}</CityListItem>\r\n      <CityListItem handler={handler}>{cityOptions.city3}</CityListItem>\r\n    </ul>\r\n  );\r\n};\r\n\r\nCityList.propTypes = {\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n  // Function passed from parent to handle API Call click\r\n  handler: PropTypes.func.isRequired,\r\n  // City options object comming from the WatherPage component\r\n  cityOptions: PropTypes.shape({\r\n    city1: PropTypes.object,\r\n    city2: PropTypes.object,\r\n    city3: PropTypes.object,\r\n  }).isRequired,\r\n};\r\n\r\nCityList.defaultProps = {\r\n  // Default value of no aditional classes\r\n  className: '',\r\n};\r\n\r\nexport default CityList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CityList from '../../molecules/CityList';\r\n\r\n/* CityNav is the parent component responsible to rendering the list of cities\r\n * available to make an API Call\r\n */\r\n\r\nconst CityNav = props => {\r\n  const { className, handler, cityOptions } = props;\r\n  return (\r\n    <nav className={`city-nav ${className}`}>\r\n      <CityList handler={handler} cityOptions={cityOptions} />\r\n    </nav>\r\n  );\r\n};\r\n\r\nCityNav.propTypes = {\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n  // Function passed from parent to handle API Call click\r\n  handler: PropTypes.func.isRequired,\r\n  // City options object comming from the WatherPage component\r\n  cityOptions: PropTypes.shape({}).isRequired,\r\n};\r\n\r\nCityNav.defaultProps = {\r\n  // Default value of no aditional classes\r\n  className: '',\r\n};\r\n\r\nexport default CityNav;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/* WeatherCurrent component only displays the current temperature.\r\n * It is part of the WeatherResult component\r\n */\r\n\r\nconst WeatherCurrent = props => {\r\n  const { children, className, unit } = props;\r\n\r\n  return (\r\n    <p className=\"weather-result__current\">\r\n      {children}\r\n      <span className={`weather-result__current--unit ${className}`}>º{unit}</span>\r\n    </p>\r\n  );\r\n};\r\n\r\nWeatherCurrent.propTypes = {\r\n  // Content/Label of the button\r\n  children: PropTypes.node.isRequired,\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n  // Temperature Unit\r\n  unit: PropTypes.oneOf(['C', 'F', 'K']),\r\n};\r\n\r\nWeatherCurrent.defaultProps = {\r\n  // Default value of no aditional classes\r\n  className: '',\r\n  // Metric(Celcius) is the default unit\r\n  unit: 'C',\r\n};\r\n\r\nexport default WeatherCurrent;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/* WeatherDetails is the child component from WeatherDetails responsible\r\n * of showing details of the current city that is being displayed.\r\n */\r\n\r\nconst WeatherDetailsCity = props => {\r\n  const { className, cityName, country, icon } = props;\r\n  return (\r\n    <div className={`weather-result__details-city ${className}`}>\r\n      <p className=\"weather-result__city-name\">\r\n        {cityName} {country ? `- ${country}` : ''}\r\n      </p>\r\n      {icon ? (\r\n        <img\r\n          className=\"weather-result__details-city__img\"\r\n          alt=\"sunny/cloudy day\"\r\n          src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\r\n        />\r\n      ) : (\r\n        <div />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nWeatherDetailsCity.propTypes = {\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n  // Currently city name displaying the weather\r\n  cityName: PropTypes.string.isRequired,\r\n  // City's country province\r\n  country: PropTypes.string,\r\n  // Weather icon from API\r\n  icon: PropTypes.string,\r\n};\r\n\r\nWeatherDetailsCity.defaultProps = {\r\n  // Default value of no aditional classes\r\n  className: '',\r\n  // No default country\r\n  country: '',\r\n  // Default icon in undefined, so it will not render an image\r\n  icon: '',\r\n};\r\n\r\nexport default WeatherDetailsCity;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { MdKeyboardArrowUp, MdKeyboardArrowDown } from 'react-icons/md';\r\n\r\n/* TempDisplay Component\r\n * Single Component with an icon and a temperature value.\r\n * The icon will display the maximum and minimum temperature indicator,\r\n *  or no icon at all if is the default variant.\r\n */\r\n\r\nconst TempDisplay = props => {\r\n  const { className, variant, temp, unit } = props;\r\n\r\n  let icon;\r\n  if (variant === 'default') {\r\n    icon = <div />;\r\n  } else if (variant === 'min') {\r\n    icon = <MdKeyboardArrowDown className=\"weather-result__min-max-item--min\" />;\r\n  } else {\r\n    icon = <MdKeyboardArrowUp className=\"weather-result__min-max-item--max\" />;\r\n  }\r\n\r\n  return (\r\n    <div className={`temp-display ${className}`}>\r\n      {icon}\r\n      <p className=\"weather-result__min-max-item\">\r\n        {temp}º{unit}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nTempDisplay.propTypes = {\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n  // Temperature from the API call\r\n  temp: PropTypes.number.isRequired,\r\n  // Component variant\r\n  variant: PropTypes.oneOf(['default', 'min', 'max']),\r\n  // Temperature Unit\r\n  unit: PropTypes.oneOf(['C', 'F', 'K']),\r\n};\r\n\r\nTempDisplay.defaultProps = {\r\n  // Default value of no aditional classes\r\n  className: '',\r\n  // Metric(Celcius) is the default unit\r\n  unit: 'C',\r\n  // Default variant is the component without an icon\r\n  variant: 'default',\r\n};\r\n\r\nexport default TempDisplay;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TempDisplay from '../../atoms/TempDisplay';\r\n\r\n/* WeatherDetailsMinMax is the child component from WeatherDetails responsible\r\n * of showing details for the mimimum and maximum temperature comming from the API Call\r\n */\r\n\r\nconst WeatherDetailsMinMax = props => {\r\n  const { className, min, max, unit } = props;\r\n  return (\r\n    <div className={`weather-result__min-max-container ${className}`}>\r\n      <TempDisplay variant=\"min\" temp={min} unit={unit} />\r\n      <TempDisplay variant=\"max\" temp={max} unit={unit} />\r\n    </div>\r\n  );\r\n};\r\n\r\nWeatherDetailsMinMax.propTypes = {\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n  // Min Temperature from the API call\r\n  min: PropTypes.number.isRequired,\r\n  // Max Temperature from the API call\r\n  max: PropTypes.number.isRequired,\r\n  // Temperature Unit\r\n  unit: PropTypes.oneOf(['C', 'F', 'K']),\r\n};\r\n\r\nWeatherDetailsMinMax.defaultProps = {\r\n  // Default value of no aditional classes\r\n  className: '',\r\n  // Metric(Celcius) is the default unit\r\n  unit: 'C',\r\n};\r\n\r\nexport default WeatherDetailsMinMax;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport WeatherDetailsCity from '../WeatherDetailsCity';\r\nimport WeatherDetailsMinMax from '../WeatherDetailsMinMax';\r\n\r\n/* WeatherDetails shows all the data except current temperature,\r\n * which is displayed at WeatherCurrent component.\r\n */\r\n\r\nconst WeatherDetails = props => {\r\n  const { className, min, max, unit, city, country, icon } = props;\r\n  return (\r\n    <div className={`weather-result__details ${className}`}>\r\n      <WeatherDetailsCity cityName={city} country={country} icon={icon} />\r\n      <WeatherDetailsMinMax min={min} max={max} unit={unit} />\r\n    </div>\r\n  );\r\n};\r\n\r\nWeatherDetails.propTypes = {\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n  // City Name\r\n  city: PropTypes.string.isRequired,\r\n  // Country Province of the city\r\n  country: PropTypes.string.isRequired,\r\n  // Min temperature from API Call\r\n  min: PropTypes.number.isRequired,\r\n  // Max temperature from API Call\r\n  max: PropTypes.number.isRequired,\r\n  // Icon describing the weather from API Call\r\n  icon: PropTypes.string.isRequired,\r\n  // Temperature Unit\r\n  unit: PropTypes.oneOf(['C', 'F', 'K']),\r\n};\r\n\r\nWeatherDetails.defaultProps = {\r\n  // Default value of no aditional classes\r\n  className: '',\r\n  // Metric(Celcius) is the default unit\r\n  unit: 'C',\r\n};\r\n\r\nexport default WeatherDetails;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport WeatherCurrent from '../../atoms/WeatherCurrent';\r\nimport WeatherDetails from '../../molecules/WeatherDetails';\r\n\r\n/* WeatherResult component is the container to show all API values passed through props\r\n * from the WeatherPage component\r\n */\r\n\r\nconst WeatherResult = props => {\r\n  const { className, city, country, temp, min, max, unit, icon, inactive } = props;\r\n\r\n  const inactiveClass = inactive ? 'weather-result--inactive' : '';\r\n\r\n  return (\r\n    <div className={`weather-result ${inactiveClass} ${className}`}>\r\n      <WeatherCurrent unit={unit}>{temp}</WeatherCurrent>\r\n      <WeatherDetails city={city} country={country} min={min} max={max} unit={unit} icon={icon} />\r\n    </div>\r\n  );\r\n};\r\n\r\nWeatherResult.propTypes = {\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n  // City Name\r\n  city: PropTypes.string.isRequired,\r\n  // Country Province of the city\r\n  country: PropTypes.string.isRequired,\r\n  // Current temperature from API Call\r\n  temp: PropTypes.number.isRequired,\r\n  // Min temperature from API Call\r\n  min: PropTypes.number.isRequired,\r\n  // Max temperature from API Call\r\n  max: PropTypes.number.isRequired,\r\n  // Icon describing the weather from API Call\r\n  icon: PropTypes.string.isRequired,\r\n  // Temperature Unit\r\n  unit: PropTypes.oneOf(['C', 'F', 'K']),\r\n  // Flag to see if some API call has been made\r\n  inactive: PropTypes.bool.isRequired,\r\n};\r\n\r\nWeatherResult.defaultProps = {\r\n  // Default value of no aditional classes\r\n  className: '',\r\n  // Metric(Celcius) is the default unit\r\n  unit: 'C',\r\n};\r\n\r\nexport default WeatherResult;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport { setMaxTemp, setMinTemp } from '../../../actions';\r\n\r\nimport CityNav from '../../organisms/CityNav';\r\nimport WeatherResult from '../../organisms/WeatherResult';\r\n\r\n/* WeatherPage is the top level component to display information about a specific location\r\n * It contains the navigation to different API Calls\r\n * And the local state to pass through props\r\n */\r\n\r\nconst WeatherPage = props => {\r\n  const { className, currentValues, setCurrentValues } = props;\r\n  const { minWeather, maxWeather } = useSelector(state => state.minMax);\r\n  const dispatch = useDispatch();\r\n\r\n  // Default City Options\r\n  const cityOptions = {\r\n    city1: { name: 'Rio de Janeiro - BR', id: '3451190' },\r\n    city2: { name: 'Toronto - CA', id: '6167865' },\r\n    city3: { name: 'San Franciso - US', id: '5391959' },\r\n  };\r\n\r\n  // Function to handle API Call when the user clicks on a city name\r\n  async function handleCall(city) {\r\n    const apiKey = process.env.REACT_APP_OPEN_WEATHER_API;\r\n    const unitAPI = 'metric';\r\n    const unitDesc = 'C';\r\n    // API Call by ID\r\n    const cityId = city.id;\r\n    const callURL = `https://api.openweathermap.org/data/2.5/weather?id=${cityId}&appid=${apiKey}&units=${unitAPI}`;\r\n    // API Call by name if ID is not available\r\n    /* const cityName = city.name.split(' - ');\r\n     * const callByNameURL = `http://api.openweathermap.org/data/2.5/weather?q=${cityName[0]},${\r\n     * cityName[1]\r\n     * }&appid=${apiKey}&units=${unitAPI}`;\r\n     */\r\n\r\n    // Make the API Call\r\n    const response = await axios.get(callURL);\r\n    const res = response.data;\r\n\r\n    // Converts temperature to number\r\n    const temp = Number(res.main.temp.toFixed());\r\n    const min = Number(res.main.temp_min.toFixed());\r\n    const max = Number(res.main.temp_max.toFixed());\r\n    // Create a new values object based on the response data\r\n    const newValues = {\r\n      city: res.name,\r\n      country: res.sys.country,\r\n      temp,\r\n      min,\r\n      max,\r\n      unit: unitDesc,\r\n      icon: res.weather[0].icon,\r\n      inactive: false,\r\n    };\r\n\r\n    // Check if is the first call\r\n    if (currentValues.inactive) {\r\n      // If it is, then both values are set on the store\r\n      dispatch(setMaxTemp({ city: res.name, country: res.sys.country, temp: max }));\r\n      dispatch(setMinTemp({ city: res.name, country: res.sys.country, temp: min }));\r\n    } else {\r\n      // If not, check min and high temperatures with what is in the store\r\n      if (max > maxWeather.temp) {\r\n        dispatch(setMaxTemp({ city: res.name, country: res.sys.country, temp: max }));\r\n      }\r\n      if (min < minWeather.temp) {\r\n        dispatch(setMinTemp({ city: res.name, country: res.sys.country, temp: min }));\r\n      }\r\n    }\r\n\r\n    // Then set new state values for currentValues\r\n    setCurrentValues(newValues);\r\n  }\r\n\r\n  const { city, country, temp, min, max, unit, icon, inactive } = currentValues;\r\n  return (\r\n    <div className={`weather-page ${className}`}>\r\n      <CityNav handler={handleCall} cityOptions={cityOptions} />\r\n      <WeatherResult\r\n        city={city}\r\n        country={country}\r\n        temp={temp}\r\n        min={min}\r\n        max={max}\r\n        unit={unit}\r\n        icon={icon}\r\n        inactive={inactive}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nWeatherPage.propTypes = {\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n  // currentValues state validation\r\n  currentValues: PropTypes.shape({\r\n    city: PropTypes.string,\r\n    country: PropTypes.string,\r\n    temp: PropTypes.number,\r\n    min: PropTypes.number,\r\n    max: PropTypes.number,\r\n    unit: PropTypes.string,\r\n    icon: PropTypes.string,\r\n    inactive: PropTypes.bool,\r\n  }).isRequired,\r\n  // setCurrentValues function\r\n  setCurrentValues: PropTypes.func.isRequired,\r\n};\r\n\r\nWeatherPage.defaultProps = {\r\n  // Default value of no aditional classes\r\n  className: '',\r\n};\r\n\r\nexport default WeatherPage;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { MdKeyboardArrowUp, MdKeyboardArrowDown } from 'react-icons/md';\r\n\r\nimport TempDisplay from '../../atoms/TempDisplay';\r\nimport WeatherDetailsCity from '../WeatherDetailsCity';\r\n\r\n/* MinMaxCard component to hold information thats comming from the Redxus store\r\n *  This component is used on the MinMaxPage template\r\n */\r\n\r\nconst MinMaxCard = props => {\r\n  const { title, cityName, country, temp, variant, className } = props;\r\n  const classIcon = `min-max-card__icon min-max-card__icon--${variant}`;\r\n  const bgIcon =\r\n    variant === 'min' ? (\r\n      <MdKeyboardArrowDown className={classIcon} />\r\n    ) : (\r\n      <MdKeyboardArrowUp className={classIcon} />\r\n    );\r\n  return (\r\n    <div className={`min-max-card ${className}`}>\r\n      <h2 className={`min-max-card__title min-max-card__title--${variant}`}>{title}</h2>\r\n      <WeatherDetailsCity cityName={cityName} country={country} />\r\n      <TempDisplay temp={temp} />\r\n      {bgIcon}\r\n    </div>\r\n  );\r\n};\r\n\r\nMinMaxCard.propTypes = {\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n  // Title of the card\r\n  title: PropTypes.string,\r\n  // City name currently being displayed\r\n  cityName: PropTypes.string.isRequired,\r\n  // City's country\r\n  country: PropTypes.string,\r\n  // Temperature value\r\n  temp: PropTypes.number.isRequired,\r\n  // Variant of min/max or none for styling\r\n  variant: PropTypes.string,\r\n};\r\n\r\nMinMaxCard.defaultProps = {\r\n  // Default value of no aditional classes\r\n  className: '',\r\n  // Inactive Cards doesn't have a title\r\n  title: '',\r\n  // No country for the default value\r\n  country: '',\r\n  // No variant for the inactive state\r\n  variant: '',\r\n};\r\n\r\nexport default MinMaxCard;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport MinMaxCard from '../../molecules/MinMaxCard';\r\n\r\n/* MinMaxPage is the top level component to display information coming from Redux\r\n * and rendering the maximum and minimum temperature seen from the API.\r\n */\r\n\r\nconst MinMaxPage = props => {\r\n  const { className } = props;\r\n  const { minWeather, maxWeather } = useSelector(state => state.minMax);\r\n  const isEmpty = Object.entries(minWeather).length === 0 && minWeather.constructor === Object;\r\n\r\n  switch (isEmpty) {\r\n    case true:\r\n      return (\r\n        <div className={`min-max-page min-max-page--inactive ${className}`}>\r\n          <MinMaxCard cityName=\"Aguardando chamada da API\" temp={0} />\r\n        </div>\r\n      );\r\n\r\n    default:\r\n      return (\r\n        <div className={`min-max-page ${className}`}>\r\n          <MinMaxCard\r\n            title=\"Cidade com a menor temperatura\"\r\n            cityName={minWeather.city}\r\n            country={minWeather.country}\r\n            temp={minWeather.temp}\r\n            variant=\"min\"\r\n          />\r\n          <MinMaxCard\r\n            title=\"Cidade com a maior temperatura\"\r\n            cityName={maxWeather.city}\r\n            country={maxWeather.country}\r\n            temp={maxWeather.temp}\r\n            variant=\"max\"\r\n          />\r\n        </div>\r\n      );\r\n  }\r\n};\r\n\r\nMinMaxPage.propTypes = {\r\n  // Extra classes that is passed\r\n  className: PropTypes.string,\r\n};\r\n\r\nMinMaxPage.defaultProps = {\r\n  // Default value of no aditional classes\r\n  className: '',\r\n};\r\n\r\nexport default MinMaxPage;\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport Header from './organisms/Header';\r\nimport WeatherPage from './template/WeatherPage';\r\nimport MinMaxPage from './template/MinMaxPage';\r\n\r\nfunction App() {\r\n  /* Current weather state on top level component so it doesn't\r\n   *  reset when changing routes and re-rendering the WeatherPage component\r\n   */\r\n  const [currentValues, setCurrentValues] = useState({\r\n    city: 'Selecione uma cidade',\r\n    country: '',\r\n    temp: 0,\r\n    min: 0,\r\n    max: 0,\r\n    unit: 'C',\r\n    icon: '13d',\r\n    inactive: true,\r\n  });\r\n\r\n  return (\r\n    <Router>\r\n      {/* Header Component always visible */}\r\n      <Header />\r\n      <Switch>\r\n        <Route path=\"/minmax\">\r\n          {/* /minmax route displays the maximum and minimum temperatures seen through Redux */}\r\n          <MinMaxPage />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          {/* / Root route shows the Weather Forecast to 3 different cities */}\r\n          <WeatherPage currentValues={currentValues} setCurrentValues={setCurrentValues} />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { SET_MINIMUM, SET_MAXIMUM } from '../actions/types';\r\n\r\nexport default function(state = { minWeather: {}, maxWeather: {} }, action) {\r\n  switch (action.type) {\r\n    case SET_MINIMUM:\r\n      return { ...state, minWeather: action.payload };\r\n    case SET_MAXIMUM:\r\n      return { ...state, maxWeather: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport minMaxReducer from './minMaxReducer';\r\n\r\nexport default combineReducers({\r\n  minMax: minMaxReducer,\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './components/index.scss';\r\n\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\n\r\n// Redux config\r\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}